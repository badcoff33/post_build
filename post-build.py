## Description:
##
## Recommended Python version is 2.7.X.
## Code is not compatible with Python version > V3.x.x.


__author__ = "Markus Prepens"

import os
import sys
import time
import re

try:
    import argparse # Requires Python > 2.7
except ImportError:
    print "Fail to import module argparse. This module is part of Python 2.7 or newer."
    sys.exit(1)



## Configure: XCPs map file
cfgXcpMapFile = os.path.join("delivery", "signals.map")

def create_dir(filepath):
    dir = os.path.dirname(filepath)
    if not os.path.exists(dir):
        os.makedirs(dir)
        print dir, 'created.'
    elif os.access(filepath, os.F_OK): # check if file exists
        if os.access(filepath, os.W_OK): # check permission
            os.remove(filepath)
            print filepath, 'removed.'
        else:
            print "No permission to write file", filepath
            sys.exit(1)


class MapReader:
    """A class to extract data from linker map files.

    The methods can read the data from Greenhills map files only. To read map
    files generated by other linkers, than Greenhills requires to rewrite the
    code extensively.

    The class is tested with this linker options: -map -Mx -Mn

    """

    maphead = None # Returns a list that contains the significant first lines of a Greenhills map file
    filtered = None

    def __init__(self, filepath):
        self.fhdl = None
        if os.access(filepath, os.R_OK):
            print 'Opening file', filepath
            print 'Last modified on', time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.gmtime(os.path.getmtime(filepath)))
            self.fhdl = open(filepath, 'r')
            lines = []
            for i in range(4):
                lines += (self.fhdl.readline())
            lines += ('\nGlobal Symbols (sorted numerically)\n')
            self.maphead = lines
            self.filtered = {}
        else:
            print "No permission to write file", filepath
            sys.exit(1)

    def filter_symbol(self, symbol):
        """Filter file content for a specific symbol.

        Returns a dictionary. Key is the symbol name. Value is a list including the
        storage type and the address.

        """
        regexp = '^\s+(?P<type>\.\w+)\s+(?P<address>\w+)\s+_' + symbol + '.*$'
        self.fhdl.seek(0)
        for line in self.fhdl:
            matches = re.search(regexp, line)
            if matches != None:
                self.filtered.update({symbol : {'type':matches.group('type'), 'address':matches.group('address')}})

    def filter_type(self, type):
        """Filter file content for specific memory type (i.e. bss).

        Returns a dictionary. Key is the symbol name. Value is a list including the
        storage type and the address.

        """
        regexp = '^\s+' + type + '\s+(?P<address>\w+)\s+_(?P<symbol>\w+).*$'
        self.fhdl.seek(0)
        for line in self.fhdl:
            matches = re.search(regexp, line)
            if matches != None:
                self.filtered.update({matches.group('symbol') : {'type':type, 'address':matches.group('address')}})

    def save_filtered_symbols(self, filepath):
        """Save the filtered symbols to the file <filepath>.

        Set the filter by calling methods filter_type or filter_symbol.

        """
        try:
            fhdl = open(filepath, 'w')
            fhdl.writelines(self.maphead)
            for key, val in self.filtered.iteritems():
                fhdl.writelines(' ' + val['type'] + ' ' + key + ' ' + val['address'] + '\n')
            fhdl.close()
        except:
           print "Could not write data to write file", filepath
           sys.exit(1)



## Create an object of the commad line options reader.
parser = argparse.ArgumentParser(description='The script shall be run after a Greenhills build.')

parser.add_argument('--debug-target',
                    '-d',
                    help='Run in debug target mode.',
                    action='store_true')

parser.add_argument('--release-target',
                    '-r',
                    help='Run in release target mode.',
                    action='store_true')

## Get the acual command line options.
args = parser.parse_args()

## Check the command line option --debug-target
if args.debug_target == True:
    create_dir(cfgXcpMapFile)
    mappings = MapReader(os.path.join('testdata', 'linker.map'))
    mappings.filter_symbol('serhldLatestRecvByte')
    mappings.filter_type('.xcp_meas')
    mappings.save_filtered_symbols(cfgXcpMapFile)


## Check the command line option --release-target
elif args.release_target == True:
    create_dir(cfgXcpMapFile)
    mappings = MapReader(os.path.join('testdata', 'linker.map'))
